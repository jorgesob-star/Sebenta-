# -------------------------------
# Imports
# -------------------------------
import streamlit as st
import pandas as pd
import altair as alt

# -------------------------------
# Configura√ß√£o da p√°gina
# -------------------------------
st.set_page_config(
    page_title="Comparador de Ganhos TVDE",
    page_icon="üöó",
    layout="wide"
)

# -------------------------------
# Inicializa√ß√£o do estado
# -------------------------------
defaults = {
    "rental_cost": 250.0,
    "rental_commission": 6.0,
    "own_insurance": 45.0,
    "own_maintenance": 25.0,
    "own_commission": 6.0,
    "own_slot_tvde": 25.0,
    "extra_expenses": 0.0,
    "include_extra_expenses": False,
    "calculation_type": None,
}

for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

# -------------------------------
# T√≠tulo
# -------------------------------
st.title("üöó Comparador de Ganhos TVDE")
st.markdown("Compare os lucros entre carro alugado e carro pr√≥prio.")

# -------------------------------
# Dados de entrada
# -------------------------------
st.header("üìä Dados de Entrada")
weekly_earnings = st.number_input("Ganhos Semanais (‚Ç¨)", min_value=0.0, value=700.0, step=10.0)
weekly_hours = st.number_input("Horas Semanais", min_value=0, value=50, step=1)
fuel_cost = st.number_input("Combust√≠vel (‚Ç¨)", min_value=0.0, value=200.0, step=5.0)

# -------------------------------
# Despesas extras
# -------------------------------
st.header("üí∏ Despesas Extras")
st.session_state.include_extra_expenses = st.checkbox(
    "Incluir despesas extras", value=st.session_state.include_extra_expenses
)
if st.session_state.include_extra_expenses:
    st.session_state.extra_expenses = st.number_input(
        "Despesas Extras (‚Ç¨)",
        min_value=0.0,
        value=st.session_state.extra_expenses,
        step=5.0
    )

# -------------------------------
# Par√¢metros avan√ßados
# -------------------------------
with st.expander("‚öôÔ∏è Par√¢metros Avan√ßados"):
    st.subheader("Carro Alugado")
    st.number_input("Custo Aluguel (‚Ç¨)", min_value=0.0, step=10.0, key="rental_cost")
    st.number_input("Comiss√£o (%)", min_value=0.0, step=0.5, key="rental_commission")

    st.subheader("Carro Pr√≥prio")
    st.number_input("Seguro (‚Ç¨)", min_value=0.0, step=5.0, key="own_insurance")
    st.number_input("Manuten√ß√£o (‚Ç¨)", min_value=0.0, step=5.0, key="own_maintenance")
    st.number_input("Comiss√£o (%)", min_value=0.0, step=0.5, key="own_commission")
    st.number_input("Slot TVDE (‚Ç¨)", min_value=0.0, step=5.0, key="own_slot_tvde")

# -------------------------------
# Bot√µes de c√°lculo
# -------------------------------
st.header("üßÆ Calcular")
screen_width = int(st.query_params.get("width", [0])[0])

if screen_width < 600:
    if st.button("üöò Alugado", use_container_width=True):
        st.session_state.calculation_type = "alugado"
    if st.button("üöó Pr√≥prio", use_container_width=True):
        st.session_state.calculation_type = "pr√≥prio"
    if st.button("‚öñÔ∏è Comparar", use_container_width=True):
        st.session_state.calculation_type = "comparar"
else:
    btn1, btn2, btn3 = st.columns([1,1,1], gap="small")
    with btn1:
        if st.button("üöò Alugado", use_container_width=True):
            st.session_state.calculation_type = "alugado"
    with btn2:
        if st.button("üöó Pr√≥prio", use_container_width=True):
            st.session_state.calculation_type = "pr√≥prio"
    with btn3:
        if st.button("‚öñÔ∏è Comparar", use_container_width=True):
            st.session_state.calculation_type = "comparar"

# -------------------------------
# Fun√ß√£o de c√°lculo
# -------------------------------
def calcular_ganhos(weekly_earnings, weekly_hours, fuel_cost, calculation_type):
    resultados = {}
    if calculation_type in ["pr√≥prio", "comparar"]:
        custos = st.session_state.own_insurance + st.session_state.own_maintenance + st.session_state.own_slot_tvde + fuel_cost
        if st.session_state.include_extra_expenses:
            custos += st.session_state.extra_expenses
        comissao = weekly_earnings * (st.session_state.own_commission / 100)
        resultados["Carro Pr√≥prio"] = weekly_earnings - custos - comissao
    if calculation_type in ["alugado", "comparar"]:
        custos = st.session_state.rental_cost + fuel_cost
        if st.session_state.include_extra_expenses:
            custos += st.session_state.extra_expenses
        comissao = weekly_earnings * (st.session_state.rental_commission / 100)
        resultados["Carro Alugado"] = weekly_earnings - custos - comissao
    return resultados

# -------------------------------
# Resultados
# -------------------------------
calculation_type = st.session_state.get("calculation_type")

if calculation_type:
    resultados = calcular_ganhos(weekly_earnings, weekly_hours, fuel_cost, calculation_type)

    st.subheader("üìä Resultados")

    # M√©tricas
    for tipo, lucro in resultados.items():
        lucro_hora = lucro / weekly_hours if weekly_hours > 0 else 0
        st.metric(label=tipo, value=f"‚Ç¨ {lucro:,.2f}", delta=f"{lucro_hora:.2f} ‚Ç¨/h")

    # Tabela detalhada
    df_resultados = pd.DataFrame({
        "Op√ß√£o": list(resultados.keys()),
        "Lucro (‚Ç¨)": [f"{v:,.2f}" for v in resultados.values()],
        "Lucro por Hora (‚Ç¨)": [f"{(v/weekly_hours):,.2f}" if weekly_hours > 0 else "0.00" for v in resultados.values()]
    })
    st.dataframe(df_resultados, use_container_width=True)

    # Diferen√ßa de valor
    if calculation_type == "comparar" and len(resultados) == 2:
        lucro_proprio = resultados.get("Carro Pr√≥prio", 0)
        lucro_alugado = resultados.get("Carro Alugado", 0)
        diferenca = lucro_proprio - lucro_alugado
        st.markdown(f"**üí∞ Diferen√ßa entre Carro Pr√≥prio e Carro Alugado:** ‚Ç¨ {diferenca:,.2f}")

    # Cores autom√°ticas
    theme = st.get_option("theme.base")
    if theme == "dark":
        bar_colors = alt.Scale(domain=["Carro Pr√≥prio", "Carro Alugado"], range=["#FFB347", "#1E90FF"])
    else:
        bar_colors = alt.Scale(domain=["Carro Pr√≥prio", "Carro Alugado"], range=["#FF7F50", "#6495ED"])

    # Gr√°fico comparativo com anota√ß√£o
    if len(resultados) > 1:
        df_chart = pd.DataFrame({"Op√ß√£o": list(resultados.keys()), "Lucro (‚Ç¨)": list(resultados.values())})

        chart = alt.Chart(df_chart).mark_bar(size=60).encode(
            x=alt.X("Op√ß√£o", sort=None),
            y="Lucro (‚Ç¨)",
            color=alt.Color("Op√ß√£o", scale=bar_colors)
        ).properties(height=300)

        if calculation_type == "comparar" and len(resultados) == 2:
            y_pos = max(resultados.values()) + 10
            diferenca_text = f"Œî ‚Ç¨ {diferenca:,.2f}"
            annotation = alt.Chart(pd.DataFrame({"y": [y_pos], "text": [diferenca_text]})).mark_text(
                align='center', baseline='bottom', color='black', fontWeight='bold'
            ).encode(
                x=alt.value(200),  # posi√ß√£o fixa para evitar TypeError
                y='y:Q',
                text='text:N'
            )
            st.altair_chart(chart + annotation, use_container_width=True)
        else:
            st.altair_chart(chart, use_container_width=True)

# -------------------------------
# Dicas
# -------------------------------
with st.expander("üí° Dicas e Informa√ß√µes"):
    st.markdown("""
    - **Ganhos Semanais**: valor total recebido pelos servi√ßos TVDE.  
    - **Horas Semanais**: total de horas trabalhadas (incluindo espera).  
    - **Combust√≠vel**: gasto m√©dio semanal.  
    - **Comiss√£o**: taxa que a plataforma ret√©m.  
    - **Aluguel**: custo semanal do carro alugado.  
    - **Seguro / Manuten√ß√£o / Slot TVDE**: custos semanais fixos do carro pr√≥prio.  
    - **Despesas Extras**: portagens, estacionamento, lavagens, etc.  
    """)
