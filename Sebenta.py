# -------------------------------
# Imports
# -------------------------------
import streamlit as st
import pandas as pd
import altair as alt

# -------------------------------
# Configura√ß√£o da p√°gina
# -------------------------------
st.set_page_config(
    page_title="Comparador de Ganhos TVDE",
    page_icon="üöó",
    layout="wide"
)

# -------------------------------
# Inicializa√ß√£o do estado
# -------------------------------
defaults = {
    "rental_cost": 270.0,
    "rental_commission": 6.0,
    "own_insurance": 45.0,
    "own_maintenance": 25.0,
    "own_commission": 12.0,
    "own_slot_tvde": 0.0,
    "extra_expenses": 0.0,
    "include_extra_expenses": False,
    "calculation_type": None,
}
for key, val in defaults.items():
    st.session_state.setdefault(key, val)

# -------------------------------
# T√≠tulo
# -------------------------------
st.title("üöó Comparador de Ganhos TVDE")
st.markdown("Compare os lucros entre carro alugado e carro pr√≥prio.")

# -------------------------------
# Dados de entrada
# -------------------------------
st.header("üìä Dados de Entrada")
weekly_earnings = st.number_input("Ganhos Semanais (‚Ç¨)", min_value=0.0, value=750.0, step=10.0)
tips = st.number_input("Gorjetas (‚Ç¨)", min_value=0.0, value=0.0, step=5.0)
cancellations = st.number_input("Taxas de Cancelamento (‚Ç¨)", min_value=0.0, value=0.0, step=5.0)
tolls = st.number_input("Portagens Pagas (‚Ç¨)", min_value=0.0, value=0.0, step=5.0)
weekly_hours = st.number_input("Horas Semanais", min_value=0, value=50, step=1)
fuel_cost = st.number_input("Combust√≠vel (‚Ç¨)", min_value=0.0, value=200.0, step=5.0)

# Ganho l√≠quido ajustado
total_ganhos = weekly_earnings + tips + cancellations
despesa_portagens = tolls

# -------------------------------
# Despesas extras
# -------------------------------
st.header("üí∏ Despesas Extras")
st.session_state.include_extra_expenses = st.checkbox(
    "Incluir despesas extras", value=st.session_state.include_extra_expenses
)
if st.session_state.include_extra_expenses:
    st.session_state.extra_expenses = st.number_input(
        "Despesas Extras (‚Ç¨)",
        min_value=0.0,
        value=st.session_state.extra_expenses,
        step=5.0
    )

# -------------------------------
# Par√¢metros avan√ßados
# -------------------------------
with st.expander("‚öôÔ∏è Par√¢metros Avan√ßados"):
    st.subheader("Carro Alugado")
    st.number_input("Custo Aluguel (‚Ç¨)", min_value=0.0, step=10.0, key="rental_cost")
    st.number_input("Comiss√£o (%)", min_value=0.0, step=0.5, key="rental_commission")

    st.subheader("Carro Pr√≥prio")
    st.number_input("Seguro (‚Ç¨)", min_value=0.0, step=5.0, key="own_insurance")
    st.number_input("Manuten√ß√£o (‚Ç¨)", min_value=0.0, step=5.0, key="own_maintenance")
    st.number_input("Comiss√£o (%)", min_value=0.0, step=0.5, key="own_commission")
    st.number_input("Slot TVDE (‚Ç¨)", min_value=0.0, step=5.0, key="own_slot_tvde")

# -------------------------------
# Fun√ß√£o de c√°lculo
# -------------------------------
def calcular_lucro(earnings, custos, comissao_pct, extra_expenses=0.0):
    total_custos = custos + extra_expenses
    comissao_valor = earnings * (comissao_pct / 100)
    lucro_liquido = earnings - total_custos - comissao_valor
    return lucro_liquido, comissao_valor

def calcular_ganhos(total_ganhos, weekly_hours, fuel_cost, calculation_type, portagens):
    resultados = {}
    detalhes = []

    extra = st.session_state.extra_expenses if st.session_state.include_extra_expenses else 0.0

    if calculation_type in ["pr√≥prio", "comparar"]:
        custos = (
            st.session_state.own_insurance
            + st.session_state.own_maintenance
            + st.session_state.own_slot_tvde
            + fuel_cost
            + portagens
        )
        lucro, comissao_valor = calcular_lucro(total_ganhos, custos, st.session_state.own_commission, extra)
        resultados["Carro Pr√≥prio"] = lucro
        detalhes.append({
            "Op√ß√£o": "Carro Pr√≥prio",
            "Seguro (‚Ç¨)": st.session_state.own_insurance,
            "Manuten√ß√£o (‚Ç¨)": st.session_state.own_maintenance,
            "Slot TVDE (‚Ç¨)": st.session_state.own_slot_tvde,
            "Combust√≠vel (‚Ç¨)": fuel_cost,
            "Portagens (‚Ç¨)": portagens,
            "Despesas Extras (‚Ç¨)": extra,
            "Comiss√£o (%)": st.session_state.own_commission,
            "Comiss√£o (‚Ç¨)": comissao_valor,
            "Lucro L√≠quido (‚Ç¨)": lucro
        })

    if calculation_type in ["alugado", "comparar"]:
        custos = st.session_state.rental_cost + fuel_cost + portagens
        lucro, comissao_valor = calcular_lucro(total_ganhos, custos, st.session_state.rental_commission, extra)
        resultados["Carro Alugado"] = lucro
        detalhes.append({
            "Op√ß√£o": "Carro Alugado",
            "Aluguel (‚Ç¨)": st.session_state.rental_cost,
            "Combust√≠vel (‚Ç¨)": fuel_cost,
            "Portagens (‚Ç¨)": portagens,
            "Despesas Extras (‚Ç¨)": extra,
            "Comiss√£o (%)": st.session_state.rental_commission,
            "Comiss√£o (‚Ç¨)": comissao_valor,
            "Lucro L√≠quido (‚Ç¨)": lucro
        })

    if calculation_type == "comparar" and len(resultados) == 2:
        lucro_proprio = resultados["Carro Pr√≥prio"]
        lucro_alugado = resultados["Carro Alugado"]
        diferenca = lucro_proprio - lucro_alugado
        diferenca_pct = (diferenca / lucro_alugado * 100) if lucro_alugado != 0 else 0
        resultados["Diferen√ßa"] = (diferenca, diferenca_pct)

    return resultados, detalhes

# -------------------------------
# Bot√µes mobile-first
# -------------------------------
st.header("üßÆ Calcular")
btn_cols = st.columns(3, gap="small")
with btn_cols[0]:
    if st.button("üöò Alugado", use_container_width=True):
        st.session_state.calculation_type = "alugado"
with btn_cols[1]:
    if st.button("üöó Pr√≥prio", use_container_width=True):
        st.session_state.calculation_type = "pr√≥prio"
with btn_cols[2]:
    if st.button("‚öñÔ∏è Comparar", use_container_width=True):
        st.session_state.calculation_type = "comparar"

# -------------------------------
# Cards e gr√°ficos
# -------------------------------
if st.session_state.calculation_type:
    resultados, detalhes = calcular_ganhos(total_ganhos, weekly_hours, fuel_cost, st.session_state.calculation_type, despesa_portagens)
    
    st.subheader("üìä Pain√©is de Lucro")
    cards = st.columns(len(resultados))

    for i, (tipo, lucro) in enumerate(resultados.items()):
        with cards[i]:
            st.markdown(f"### {tipo}")
            if tipo == "Diferen√ßa":
                st.markdown(f"<h2>‚Ç¨ {lucro[0]:,.2f}</h2>", unsafe_allow_html=True)
                st.markdown(f"<p>Œî {lucro[1]:.1f}%</p>", unsafe_allow_html=True)
            else:
                if weekly_hours > 0:
                    lucro_hora = lucro / weekly_hours
                else:
                    lucro_hora = 0
                    st.warning("‚ö†Ô∏è Horas semanais = 0, lucro/hora n√£o calculado.")

                if lucro < 0:
                    st.warning(f"‚ö†Ô∏è Lucro negativo: ‚Ç¨ {lucro:,.2f}")

                st.markdown(f"<h2>‚Ç¨ {lucro:,.2f}</h2>", unsafe_allow_html=True)
                st.markdown(f"<p>Lucro/hora: ‚Ç¨ {lucro_hora:.2f} ‚Ç¨/h</p>", unsafe_allow_html=True)

                detalhe = next((d for d in detalhes if d["Op√ß√£o"] == tipo), None)
                if detalhe:
                    for k, v in detalhe.items():
                        if k not in ["Op√ß√£o", "Lucro L√≠quido (‚Ç¨)"]:
                            if "%" in k:
                                st.markdown(f"{k}: {v:.1f}%")
                            else:
                                st.markdown(f"{k}: ‚Ç¨ {v:,.2f}")

    # Gr√°fico Altair
    theme = st.get_option("theme.base")
    colors = {"dark": ["#FFB347", "#1E90FF"], "light": ["#FF7F50", "#6495ED"]}
    bar_colors = alt.Scale(
        domain=[k for k in resultados.keys() if k != "Diferen√ßa"],
        range=colors.get(theme, colors["light"])
    )
    df_chart = pd.DataFrame({
        "Op√ß√£o": [k for k in resultados.keys() if k != "Diferen√ßa"],
        "Lucro (‚Ç¨)": [v for k,v in resultados.items() if k != "Diferen√ßa"]
    })
    if not df_chart.empty:
        chart = alt.Chart(df_chart).mark_bar(size=60).encode(
            x=alt.X("Op√ß√£o", sort=None),
            y="Lucro (‚Ç¨)",
            color=alt.Color("Op√ß√£o", scale=bar_colors),
            tooltip=["Op√ß√£o", "Lucro (‚Ç¨)"]
        ).properties(height=300)
        st.altair_chart(chart, use_container_width=True)

# -------------------------------
# Dicas
# -------------------------------
with st.expander("üí° Dicas e Informa√ß√µes"):
    st.markdown("""
    - **Ganhos Semanais**: valor total recebido pelos servi√ßos TVDE (sem gorjetas e cancelamentos).  
    - **Gorjetas**: valor extra dado pelos clientes.  
    - **Taxas de Cancelamento**: valor recebido quando a viagem √© cancelada.  
    - **Portagens Pagas**: custos de portagens suportados pelo motorista.  
    - **Horas Semanais**: total de horas trabalhadas (incluindo espera).  
    - **Combust√≠vel**: gasto m√©dio semanal.  
    - **Comiss√£o**: taxa que a plataforma ret√©m.  
    - **Aluguel**: custo semanal do carro alugado.  
    - **Seguro / Manuten√ß√£o / Slot TVDE**: custos semanais fixos do carro pr√≥prio.  
    - **Despesas Extras**: estacionamento, lavagens, etc.  
    """)
